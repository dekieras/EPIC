#ifndef VISUAL_PHYSICAL_STORE_H
#define VISUAL_PHYSICAL_STORE_H

/*
The Visual_physical_store holds Physical_objects, and represents the state of affairs 
"on the skin" of the human, shared between modalities. This represents 
e.g. the light energy impinging on the human, independently of whether
the eye can see it or not. The external device causes the creation, modification,
and destruction of Physical_objects via direct calls to the Visual_physical_store.

This decouples Human_processor from Device, in that Human_processor keeps its own copy of
the physical situation generated by the Device.

The Visual_physical_store will update its representation of the objects and then do a
direct call of the Eye_processor to act on that change. 
*/


#include "Visual_store.h"
#include "Symbol.h"
#include "OPV_Containers.h"
#include "Geometry.h"
namespace GU = Geometry_Utilities;
//#include "Output_tee.h"

//#include <map>
//#include <set>

/* Visual_physical_object has the physical properties of an object, which includes where it
is relative to the retina. It carries a physical name assigned by the external device.
*/

class Visual_physical_object : public Visual_store_object {
public:
	static std::shared_ptr<Visual_store_object> create(const Symbol& physical_name_, GU::Point location_, GU::Size size_)
			{return std::shared_ptr<Visual_store_object>(new Visual_physical_object(physical_name_, location_, size_));}

	virtual void update_eccentricity_and_visibility(GU::Point eye_location, double peripheral_radius);
	virtual void update_eccentricity(GU::Point eye_location);
	virtual double get_eccentricity() const;
	// Eye_processor decides whether an object is visible
	virtual bool is_visible() const;
	virtual void set_visible(bool visible_);
	virtual bool is_available(const Symbol& prop_name) const;
	virtual void set_available(const Symbol& prop_name);
	virtual void set_unavailable(const Symbol& prop_name);
	
	void display_contents(Output_tee& ot) const;
	
private:
	double eccentricity;
	bool visible;
	std::set<Symbol> available_properties;	// the properties of this object that are available

	Visual_physical_object(const Symbol& name, GU::Point location_, GU::Size size_) :
		Visual_store_object(name, location_, size_), 
		eccentricity(0.), visible(false)
		{}

	// no copy, assignment
	Visual_physical_object(const Visual_physical_object&);
	Visual_physical_object& operator= (const Visual_physical_object&);
};


/* Visual_physical_store
This is a processor that contains a container of Physical objects. 
The device can add or modify objects directly, and the result is a direct call
to the Eye_processor.
*/

class Visual_physical_store : public Visual_store {
public:
	Visual_physical_store(Human_processor * human_ptr_) :
		Visual_store("Visual_physical_store", human_ptr_)
		{}

	virtual void initialize();
	
	// inputs - physical name only is supplied
	virtual void make_object_appear(const Symbol& obj_name, GU::Point location, GU::Size size);
	virtual void make_object_disappear(const Symbol& obj_name);
	// the following return the previous value, and do nothing unless it is different from the new value
	virtual GU::Point set_object_location(const Symbol& obj_name, GU::Point location);
	virtual GU::Size set_object_size(const Symbol& obj_name, GU::Size size);
	virtual Symbol set_object_property(const Symbol& obj_name, const Symbol& propname, const Symbol& propvalue);

private:
	// no copy, assignment
	Visual_physical_store(const Visual_physical_store&);
	Visual_physical_store& operator= (const Visual_physical_store&);
};

#endif
