#ifndef AUDITORY_PHYSICAL_STORE_H
#define AUDITORY_PHYSICAL_STORE_H

/*
The Auditory_physical_store holds Auditory_physical streams and sounds, and represents the state of affairs 
"on the skin" of the human. This interface represents e.g. the sound energy impinging on the human, 
independently of whether the ear (or the rest of the auditory system) can hear it or not. 

This decouples the simulated Human from Device, in that this interface keeps its own copy of
the physical situation generated by the Device.

The Auditory_physical_store will update its representation of the objects and then do a
direct call of the Ear_processor to act on that change. 

6/16/15 - Stream object interface has been removed - device can no longer supply representation of stream objects
*/

#include "Auditory_store.h"
//#include "Human_subprocessor.h"
//#include "Name_map.h"
#include "Symbol.h"
#include "Geometry.h"
namespace GU = Geometry_Utilities;
//#include "Output_tee.h"

struct Speech_word;


/* Auditory_physical_store
This is a processor that contains a container of Auditory sounds. 

The device can add or modify objects directly, and the result is a direct call
to the Ear_processor.
*/

class Auditory_physical_store : public Auditory_store {
public:
	Auditory_physical_store(Human_processor * human_ptr_) :
		Auditory_store("Auditory_physical_store", human_ptr_)
        {}

	virtual void initialize();
	
	/* direct inputs - 
	   object name is supplied along with all relevant information - no backwards lookup necessary
	   returns true if a change was made to data base (and so input should be processed further) and false otherwise.
	   Some functions return the previous value, and do nothing unless it is different from the new value.
	*/

	// sound inputs
	// physical interface
	virtual void make_sound_start(const Symbol& name, const Symbol& stream_name, GU::Point location, const Symbol& timbre, double loudness, long intrinsic_duration);
//	virtual void make_speech_start(const Symbol& physical_name, const Symbol& stream_name,  
//		const Symbol& content, const Symbol& speaker_gender, const Symbol& speaker_id, double loudness, long duration);
	virtual void make_speech_start(const Speech_word& word);
	virtual void make_sound_stop(const Symbol& name);	
	virtual void make_sound_event(const Symbol& name, const Symbol& stream_name, GU::Point location, const Symbol& timbre, double loudness, long duration, long intrinsic_duration = 0);

	virtual void make_speech_event(const Speech_word& word);
	virtual void erase_sound(const Symbol& name);
	virtual Symbol set_sound_property(const Symbol& name, const Symbol& propname, const Symbol& propvalue);

	// event interface - implemented to allow other components to "fire & forget" long-duration auditory inputs
	virtual void accept_event(const Auditory_event *);
	virtual void handle_event(const Auditory_Sound_Stop_event *);
	// handles events generated by Vocal_processor.
	virtual void handle_event(const Auditory_Speech_event *);

private:

	// no default copy, assignment
	Auditory_physical_store(const Auditory_physical_store&);
	Auditory_physical_store& operator= (const Auditory_physical_store&);
};

#endif
